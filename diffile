diff --git a/lineapy/data/types.py b/lineapy/data/types.py
index 9e6990f..4be4557 100644
--- a/lineapy/data/types.py
+++ b/lineapy/data/types.py
@@ -30,6 +30,7 @@ class HardwareSpec(BaseModel):
 
 
 class Library(BaseModel):
+    id: LineaID
     name: str
     version: str
     path: str
@@ -121,7 +122,7 @@ class SideEffectsNode(Node):
 class ImportNode(Node):
     node_type: NodeType = NodeType.ImportNode
     code: str
-    library: Library
+    library: Optional[Library]
     attributes: Optional[Dict[str, str]] = None  # key is alias, value is full name
     alias: Optional[str] = None
     module: Any = None
@@ -133,7 +134,6 @@ class ArgumentNode(Node):
     positional_order: Optional[int]
     value_node_id: Optional[LineaID]
     value_literal: Optional[Any]
-    value_pickled: Optional[str]
 
 
 class CallNode(Node):
diff --git a/lineapy/db/db.py b/lineapy/db/db.py
index 1779cbd..fa4812e 100644
--- a/lineapy/db/db.py
+++ b/lineapy/db/db.py
@@ -91,7 +91,20 @@ class LineaDB(LineaDBReader, LineaDBWriter):
         pass
 
     def write_context(self, context: SessionContext) -> None:
-        context_orm = SessionContextORM(**context.dict())
+        args = context.dict()
+
+        args["library_ids"] = args["libraries"]
+
+        for i in range(len(args["libraries"])):
+            lib_args = context.libraries[i].dict()
+            lib_args["session_id"] = context.id
+            self.session.add(LibraryORM(**lib_args))
+
+            args["library_ids"][i] = context.libraries[i].id
+
+        del args["libraries"]
+
+        context_orm = SessionContextORM(**args)
 
         self.session.add(context_orm)
         self.session.commit()
@@ -113,16 +126,20 @@ class LineaDB(LineaDBReader, LineaDBWriter):
     def write_single_node(self, node: Node) -> None:
         args = node.dict()
         if node.node_type is NodeType.ImportNode:
+            node = cast(ImportNode, node)
+            args["library_id"] = node.library.id
+            del args["library"]
             del args["module"]
+
         elif node.node_type in [NodeType.CallNode, NodeType.StateChangeNode]:
             del args["value"]
 
-        if node.node_type is NodeType.ArgumentNode:
+        elif node.node_type is NodeType.ArgumentNode:
             node = cast(ArgumentNode, node)
             if node.value_literal is not None:
                 args["value_literal_type"] = LineaDB.get_type(node.value_literal)
 
-        if node.node_type is NodeType.LiteralAssignNode:
+        elif node.node_type is NodeType.LiteralAssignNode:
             node = cast(LiteralAssignNode, node)
             args["value_type"] = LineaDB.get_type(node.value)
 
@@ -163,7 +180,16 @@ class LineaDB(LineaDBReader, LineaDBWriter):
             .filter(SessionContextORM.id == linea_id)
             .one()
         )
-        return SessionContext.from_orm(query_obj)
+        obj = SessionContext.from_orm(query_obj)
+        obj.libraries = []
+        for i in range(len(query_obj.library_ids)):
+            library_orm = (
+                self.session.query(LibraryORM)
+                .filter(LibraryORM.id == query_obj.library_ids[i])
+                .one()
+            )
+            obj.libraries.append(Library.from_orm(library_orm))
+        return obj
 
     def get_node_by_id(self, linea_id: LineaID) -> Node:
         """
@@ -175,12 +201,25 @@ class LineaDB(LineaDBReader, LineaDBWriter):
 
         # cast string serialized values to their appropriate types
         if query_obj.node_type is NodeType.LiteralAssignNode:
+            obj = cast(LiteralAssignNode, obj)
             obj.value = LineaDB.cast_serialized(obj.value, query_obj.value_type)
+            return obj
         elif query_obj.node_type is NodeType.ArgumentNode:
+            obj = cast(ArgumentNode, obj)
             if obj.value_literal is not None:
                 obj.value_literal = LineaDB.cast_serialized(
                     obj.value_literal, query_obj.value_literal_type
                 )
+                return obj
+        elif query_obj.node_type is NodeType.ImportNode:
+            obj = cast(ImportNode, obj)
+            library_orm = (
+                self.session.query(LibraryORM)
+                .filter(LibraryORM.id == query_obj.library_id)
+                .one()
+            )
+            obj.library = Library.from_orm(library_orm)
+            return obj
 
         return obj
 
diff --git a/lineapy/db/relational/schema/relational.py b/lineapy/db/relational/schema/relational.py
index 2562bdf..87ec6a2 100644
--- a/lineapy/db/relational/schema/relational.py
+++ b/lineapy/db/relational/schema/relational.py
@@ -67,13 +67,22 @@ class SessionContextORM(Base):
     session_name = Column(String, nullable=True)
     user_name = Column(String, nullable=True)
     hardware_spec = Column(String, nullable=True)
-    libraries = Column(PickleType, nullable=True)
+    library_ids = relationship("LibraryORM", backref="session")
+
+
+class LibraryORM(Base):
+    __tablename__ = "library"
+    id = Column(LineaID, primary_key=True)
+    session_id = Column(LineaID, ForeignKey("session_context.id"))
+    name = Column(String)
+    version = Column(String)
+    path = Column(String)
 
 
-# TODO: spec out artifact table
 class ArtifactORM(Base):
     __tablename__ = "artifact"
     id = Column(LineaID, primary_key=True)
+    description = Column(String, nullable=True)
 
 
 class NodeORM(Base):
@@ -92,8 +101,8 @@ class NodeORM(Base):
 
 class DirectedEdgeORM(Base):
     __tablename__ = "directed_edge"
-    source_node_id = Column(LineaID, primary_key=True)
-    sink_node_id = Column(LineaID, primary_key=True)
+    source_node_id = Column(LineaID, ForeignKey(NodeORM.id), primary_key=True)
+    sink_node_id = Column(LineaID, ForeignKey(NodeORM.id), primary_key=True)
 
 
 class SideEffectsNodeORM(NodeORM):
@@ -106,7 +115,7 @@ class SideEffectsNodeORM(NodeORM):
 class ImportNodeORM(NodeORM):
     __mapper_args__ = {"polymorphic_identity": NodeType.ImportNode}
 
-    library = Column(PickleType)
+    library_id = Column(LineaID, ForeignKey("library.id"))
     attributes = Column(PickleType, nullable=True)
     alias = Column(String, nullable=True)
 
@@ -118,7 +127,6 @@ class ArgumentNodeORM(NodeORM):
     positional_order = Column(Integer, nullable=True)
     value_literal = Column(String, nullable=True)
     value_literal_type = Column(Enum(LiteralType), nullable=True)
-    value_pickled = Column(PickleType, nullable=True)
 
     @declared_attr
     def value_node_id(cls):
diff --git a/tests/lineadb_test.py b/tests/lineadb_test.py
index c1bd34e..0aaeaae 100644
--- a/tests/lineadb_test.py
+++ b/tests/lineadb_test.py
@@ -6,13 +6,20 @@ from tests.stub_data.simple_graph import simple_graph
 from tests.stub_data.simple_with_variable_argument_and_print import (
     simple_with_variable_argument_and_print,
 )
-from tests.stub_data.graph_with_import import graph_with_import
+from tests.stub_data.graph_with_import import (
+    graph_with_import,
+    session as graph_with_import_session,
+)
 from tests.stub_data.nested_call_graph import nested_call_graph
 from tests.stub_data.simple_graph import simple_graph
-from tests.stub_data.graph_with_loops import graph_with_loops
+from tests.stub_data.graph_with_loops import (
+    graph_with_loops,
+    session as graph_with_loops_session,
+)
 from tests.stub_data.graph_with_conditionals import graph_with_conditionals
 from tests.stub_data.graph_with_function_definition import (
     graph_with_function_definition,
+    session as graph_with_function_definition_session,
 )
 from tests.stub_data.simple_with_variable_argument_and_print import (
     simple_with_variable_argument_and_print,
@@ -103,24 +110,30 @@ class TestLineaDB:
         """
         some imports are built in, such as "math" or "datetime"
         """
-        graph = self.write_and_read_graph(graph_with_import)
+        graph, context = self.write_and_read_graph(
+            graph_with_import, graph_with_import_session
+        )
         e = Executor()
-        e.execute_program(graph)
+        e.execute_program(graph, context)
         b = e.get_value_by_variable_name("b")
         assert b == 5
 
     def test_graph_with_function_definition(self):
         """ """
-        graph = self.write_and_read_graph(graph_with_function_definition)
+        graph, context = self.write_and_read_graph(
+            graph_with_function_definition, graph_with_function_definition_session
+        )
         e = Executor()
-        e.execute_program(graph)
+        e.execute_program(graph, context)
         a = e.get_value_by_variable_name("a")
         assert a == 120
 
     def test_program_with_loops(self):
-        graph = self.write_and_read_graph(graph_with_loops)
+        graph, context = self.write_and_read_graph(
+            graph_with_loops, graph_with_loops_session
+        )
         e = Executor()
-        e.execute_program(graph)
+        e.execute_program(graph, context)
         y = e.get_value_by_variable_name("y")
         x = e.get_value_by_variable_name("x")
         a = e.get_value_by_variable_name("a")
diff --git a/tests/stub_data/graph_with_conditionals.py b/tests/stub_data/graph_with_conditionals.py
index 4616b92..c1e965b 100644
--- a/tests/stub_data/graph_with_conditionals.py
+++ b/tests/stub_data/graph_with_conditionals.py
@@ -12,7 +12,7 @@ from lineapy.data.types import (
     StateChangeNode,
 )
 
-from tests.util import get_new_id
+from tests.util import get_new_id, get_new_session
 
 """
 Original code:
@@ -27,12 +27,7 @@ else:
 ```
 """
 
-session = SessionContext(
-    id=get_new_id(),
-    file_name="testing.py",
-    environment_type=SessionType.SCRIPT,
-    creation_time=datetime.now(),
-)
+session = get_new_session()
 
 arg_1 = ArgumentNode(
     id=get_new_id(),
diff --git a/tests/stub_data/graph_with_csv_import.py b/tests/stub_data/graph_with_csv_import.py
index 1cacae5..196ddcc 100644
--- a/tests/stub_data/graph_with_csv_import.py
+++ b/tests/stub_data/graph_with_csv_import.py
@@ -20,6 +20,7 @@ s = df['a'].sum()
 This test also has method chaining, which is a good case
 """
 pandas_lib = Library(
+    id=get_new_id(),
     name="pandas",
     version="1.2.4",
     path="/Users/yifanwu/miniforge3/lib/python3.9/site-packages/pandas",
diff --git a/tests/stub_data/graph_with_function_definition.py b/tests/stub_data/graph_with_function_definition.py
index 7be3e1b..4915917 100644
--- a/tests/stub_data/graph_with_function_definition.py
+++ b/tests/stub_data/graph_with_function_definition.py
@@ -1,6 +1,5 @@
 from lineapy.data.graph import Graph
-from tests.util import get_new_id
-from tests.stub_data.simple_graph import session
+from tests.util import get_new_id, get_new_session
 from lineapy.data.graph import Graph
 from lineapy.data.types import (
     ImportNode,
@@ -28,13 +27,17 @@ my_function()
 
 """
 
+math_lib = Library(id=get_new_id(), name="math", version="1", path="home")
+
+session = get_new_session(libraries=[math_lib])
+
 line_1_id = get_new_id()
 
 line_1_import = ImportNode(
     id=line_1_id,
     session_id=session.id,
     code="import math",
-    library=Library(name="math", version="1", path="home"),
+    library=math_lib,
 )
 
 a_id = get_new_id()
diff --git a/tests/stub_data/graph_with_import.py b/tests/stub_data/graph_with_import.py
index c9d123d..7913501 100644
--- a/tests/stub_data/graph_with_import.py
+++ b/tests/stub_data/graph_with_import.py
@@ -11,7 +11,7 @@ from lineapy.data.types import (
     SessionType,
 )
 
-from tests.util import get_new_id
+from tests.util import get_new_id, get_new_session
 
 """
 
@@ -22,12 +22,9 @@ b = root(a)
 ```
 """
 
-session = SessionContext(
-    id=get_new_id(),
-    file_name="testing.py",
-    environment_type=SessionType.SCRIPT,
-    creation_time=datetime.now(),
-)
+math_lib = Library(id=get_new_id(), name="math", version="1", path="")
+
+session = get_new_session(libraries=[math_lib])
 
 line_1_id = get_new_id()
 
@@ -35,7 +32,7 @@ line_1 = ImportNode(
     id=line_1_id,
     session_id=session.id,
     code="from math import pow, sqrt as root",
-    library=Library(name="math", version="1", path=""),
+    library=math_lib,
     attributes={"power": "pow", "root": "sqrt"},
 )
 
diff --git a/tests/stub_data/graph_with_loops.py b/tests/stub_data/graph_with_loops.py
index fb240df..2376166 100644
--- a/tests/stub_data/graph_with_loops.py
+++ b/tests/stub_data/graph_with_loops.py
@@ -1,5 +1,4 @@
-from tests.util import get_new_id
-from tests.stub_data.simple_graph import session
+from tests.util import get_new_id, get_new_session
 from lineapy.data.graph import Graph
 from lineapy.data.types import (
     LiteralAssignNode,
@@ -32,6 +31,9 @@ Graph method notes:
 
 """
 
+operator_lib = Library(id=get_new_id(), name="operator", version="1", path="")
+
+session = get_new_session(libraries=[operator_lib])
 
 a_id = get_new_id()
 
@@ -116,7 +118,7 @@ operator_module = ImportNode(
     id=operator_module_id,
     session_id=session.id,
     code="import operator",
-    library=Library(name="operator", version="1", path=""),
+    library=operator_lib,
 )
 
 x_argument_id = get_new_id()
diff --git a/tests/stub_data/nested_call_graph.py b/tests/stub_data/nested_call_graph.py
index 849836a..8a3fc39 100644
--- a/tests/stub_data/nested_call_graph.py
+++ b/tests/stub_data/nested_call_graph.py
@@ -1,5 +1,5 @@
 from lineapy.data.graph import Graph
-from tests.util import get_new_id
+from tests.util import get_new_id, get_new_session
 from lineapy.data.types import (
     ArgumentNode,
     CallNode,
@@ -16,12 +16,7 @@ a = min(abs(-11), 10)
 ```
 """
 
-session = SessionContext(
-    id=get_new_id(),
-    file_name="testing.py",
-    environment_type=SessionType.SCRIPT,
-    creation_time=datetime.now(),
-)
+session = get_new_session()
 
 arg_literal_id = get_new_id()
 
diff --git a/tests/stub_data/simple_graph.py b/tests/stub_data/simple_graph.py
index 1158bf7..59b1166 100644
--- a/tests/stub_data/simple_graph.py
+++ b/tests/stub_data/simple_graph.py
@@ -7,7 +7,7 @@ from lineapy.data.types import (
     SessionContext,
     SessionType,
 )
-from tests.util import get_new_id
+from tests.util import get_new_id, get_new_session
 
 """
 The simple graph represents the execution of the following:
@@ -21,12 +21,7 @@ Notes:
 - the ids are kept constant so we can more easily reference the same values in a different file
 """
 
-session = SessionContext(
-    id=get_new_id(),
-    file_name="testing.py",
-    environment_type=SessionType.SCRIPT,
-    creation_time=datetime.now(),
-)
+session = get_new_session()
 
 arg_literal_id = get_new_id()
 
diff --git a/tests/util.py b/tests/util.py
index d2e4e57..b14f731 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -12,7 +12,7 @@ def get_new_id():
     return uuid4()
 
 
-def get_new_session(libraries):
+def get_new_session(libraries=[]):
     return SessionContext(
         id=get_new_id(),
         file_name="testing.py",
diff --git a/lineapy/data/types.py b/lineapy/data/types.py
index 9e6990f..4be4557 100644
--- a/lineapy/data/types.py
+++ b/lineapy/data/types.py
@@ -30,6 +30,7 @@ class HardwareSpec(BaseModel):
 
 
 class Library(BaseModel):
+    id: LineaID
     name: str
     version: str
     path: str
@@ -121,7 +122,7 @@ class SideEffectsNode(Node):
 class ImportNode(Node):
     node_type: NodeType = NodeType.ImportNode
     code: str
-    library: Library
+    library: Optional[Library]
     attributes: Optional[Dict[str, str]] = None  # key is alias, value is full name
     alias: Optional[str] = None
     module: Any = None
@@ -133,7 +134,6 @@ class ArgumentNode(Node):
     positional_order: Optional[int]
     value_node_id: Optional[LineaID]
     value_literal: Optional[Any]
-    value_pickled: Optional[str]
 
 
 class CallNode(Node):
diff --git a/lineapy/db/db.py b/lineapy/db/db.py
index 1779cbd..a7aeb5c 100644
--- a/lineapy/db/db.py
+++ b/lineapy/db/db.py
@@ -91,7 +91,17 @@ class LineaDB(LineaDBReader, LineaDBWriter):
         pass
 
     def write_context(self, context: SessionContext) -> None:
-        context_orm = SessionContextORM(**context.dict())
+        args = context.dict()
+
+        for i in range(len(args["libraries"])):
+            lib_args = context.libraries[i].dict()
+            lib_args["session_id"] = context.id
+            library_orm = LibraryORM(**lib_args)
+            self.session.add(library_orm)
+
+            args["libraries"][i] = library_orm
+
+        context_orm = SessionContextORM(**args)
 
         self.session.add(context_orm)
         self.session.commit()
@@ -113,16 +123,20 @@ class LineaDB(LineaDBReader, LineaDBWriter):
     def write_single_node(self, node: Node) -> None:
         args = node.dict()
         if node.node_type is NodeType.ImportNode:
+            node = cast(ImportNode, node)
+            args["library_id"] = node.library.id
+            del args["library"]
             del args["module"]
+
         elif node.node_type in [NodeType.CallNode, NodeType.StateChangeNode]:
             del args["value"]
 
-        if node.node_type is NodeType.ArgumentNode:
+        elif node.node_type is NodeType.ArgumentNode:
             node = cast(ArgumentNode, node)
             if node.value_literal is not None:
                 args["value_literal_type"] = LineaDB.get_type(node.value_literal)
 
-        if node.node_type is NodeType.LiteralAssignNode:
+        elif node.node_type is NodeType.LiteralAssignNode:
             node = cast(LiteralAssignNode, node)
             args["value_type"] = LineaDB.get_type(node.value)
 
@@ -163,7 +177,8 @@ class LineaDB(LineaDBReader, LineaDBWriter):
             .filter(SessionContextORM.id == linea_id)
             .one()
         )
-        return SessionContext.from_orm(query_obj)
+        obj = SessionContext.from_orm(query_obj)
+        return obj
 
     def get_node_by_id(self, linea_id: LineaID) -> Node:
         """
@@ -175,12 +190,25 @@ class LineaDB(LineaDBReader, LineaDBWriter):
 
         # cast string serialized values to their appropriate types
         if query_obj.node_type is NodeType.LiteralAssignNode:
+            obj = cast(LiteralAssignNode, obj)
             obj.value = LineaDB.cast_serialized(obj.value, query_obj.value_type)
+            return obj
         elif query_obj.node_type is NodeType.ArgumentNode:
+            obj = cast(ArgumentNode, obj)
             if obj.value_literal is not None:
                 obj.value_literal = LineaDB.cast_serialized(
                     obj.value_literal, query_obj.value_literal_type
                 )
+                return obj
+        elif query_obj.node_type is NodeType.ImportNode:
+            obj = cast(ImportNode, obj)
+            library_orm = (
+                self.session.query(LibraryORM)
+                .filter(LibraryORM.id == query_obj.library_id)
+                .one()
+            )
+            obj.library = Library.from_orm(library_orm)
+            return obj
 
         return obj
 
diff --git a/lineapy/db/relational/schema/relational.py b/lineapy/db/relational/schema/relational.py
index 2562bdf..b4b6058 100644
--- a/lineapy/db/relational/schema/relational.py
+++ b/lineapy/db/relational/schema/relational.py
@@ -67,13 +67,22 @@ class SessionContextORM(Base):
     session_name = Column(String, nullable=True)
     user_name = Column(String, nullable=True)
     hardware_spec = Column(String, nullable=True)
-    libraries = Column(PickleType, nullable=True)
+    libraries = relationship("LibraryORM", backref="session")
+
+
+class LibraryORM(Base):
+    __tablename__ = "library"
+    id = Column(LineaID, primary_key=True)
+    session_id = Column(LineaID, ForeignKey("session_context.id"))
+    name = Column(String)
+    version = Column(String)
+    path = Column(String)
 
 
-# TODO: spec out artifact table
 class ArtifactORM(Base):
     __tablename__ = "artifact"
     id = Column(LineaID, primary_key=True)
+    description = Column(String, nullable=True)
 
 
 class NodeORM(Base):
@@ -92,8 +101,8 @@ class NodeORM(Base):
 
 class DirectedEdgeORM(Base):
     __tablename__ = "directed_edge"
-    source_node_id = Column(LineaID, primary_key=True)
-    sink_node_id = Column(LineaID, primary_key=True)
+    source_node_id = Column(LineaID, ForeignKey(NodeORM.id), primary_key=True)
+    sink_node_id = Column(LineaID, ForeignKey(NodeORM.id), primary_key=True)
 
 
 class SideEffectsNodeORM(NodeORM):
@@ -106,7 +115,7 @@ class SideEffectsNodeORM(NodeORM):
 class ImportNodeORM(NodeORM):
     __mapper_args__ = {"polymorphic_identity": NodeType.ImportNode}
 
-    library = Column(PickleType)
+    library_id = Column(LineaID, ForeignKey("library.id"))
     attributes = Column(PickleType, nullable=True)
     alias = Column(String, nullable=True)
 
@@ -118,7 +127,6 @@ class ArgumentNodeORM(NodeORM):
     positional_order = Column(Integer, nullable=True)
     value_literal = Column(String, nullable=True)
     value_literal_type = Column(Enum(LiteralType), nullable=True)
-    value_pickled = Column(PickleType, nullable=True)
 
     @declared_attr
     def value_node_id(cls):
diff --git a/tests/lineadb_test.py b/tests/lineadb_test.py
index c1bd34e..0aaeaae 100644
--- a/tests/lineadb_test.py
+++ b/tests/lineadb_test.py
@@ -6,13 +6,20 @@ from tests.stub_data.simple_graph import simple_graph
 from tests.stub_data.simple_with_variable_argument_and_print import (
     simple_with_variable_argument_and_print,
 )
-from tests.stub_data.graph_with_import import graph_with_import
+from tests.stub_data.graph_with_import import (
+    graph_with_import,
+    session as graph_with_import_session,
+)
 from tests.stub_data.nested_call_graph import nested_call_graph
 from tests.stub_data.simple_graph import simple_graph
-from tests.stub_data.graph_with_loops import graph_with_loops
+from tests.stub_data.graph_with_loops import (
+    graph_with_loops,
+    session as graph_with_loops_session,
+)
 from tests.stub_data.graph_with_conditionals import graph_with_conditionals
 from tests.stub_data.graph_with_function_definition import (
     graph_with_function_definition,
+    session as graph_with_function_definition_session,
 )
 from tests.stub_data.simple_with_variable_argument_and_print import (
     simple_with_variable_argument_and_print,
@@ -103,24 +110,30 @@ class TestLineaDB:
         """
         some imports are built in, such as "math" or "datetime"
         """
-        graph = self.write_and_read_graph(graph_with_import)
+        graph, context = self.write_and_read_graph(
+            graph_with_import, graph_with_import_session
+        )
         e = Executor()
-        e.execute_program(graph)
+        e.execute_program(graph, context)
         b = e.get_value_by_variable_name("b")
         assert b == 5
 
     def test_graph_with_function_definition(self):
         """ """
-        graph = self.write_and_read_graph(graph_with_function_definition)
+        graph, context = self.write_and_read_graph(
+            graph_with_function_definition, graph_with_function_definition_session
+        )
         e = Executor()
-        e.execute_program(graph)
+        e.execute_program(graph, context)
         a = e.get_value_by_variable_name("a")
         assert a == 120
 
     def test_program_with_loops(self):
-        graph = self.write_and_read_graph(graph_with_loops)
+        graph, context = self.write_and_read_graph(
+            graph_with_loops, graph_with_loops_session
+        )
         e = Executor()
-        e.execute_program(graph)
+        e.execute_program(graph, context)
         y = e.get_value_by_variable_name("y")
         x = e.get_value_by_variable_name("x")
         a = e.get_value_by_variable_name("a")
diff --git a/tests/stub_data/graph_with_conditionals.py b/tests/stub_data/graph_with_conditionals.py
index 4616b92..c1e965b 100644
--- a/tests/stub_data/graph_with_conditionals.py
+++ b/tests/stub_data/graph_with_conditionals.py
@@ -12,7 +12,7 @@ from lineapy.data.types import (
     StateChangeNode,
 )
 
-from tests.util import get_new_id
+from tests.util import get_new_id, get_new_session
 
 """
 Original code:
@@ -27,12 +27,7 @@ else:
 ```
 """
 
-session = SessionContext(
-    id=get_new_id(),
-    file_name="testing.py",
-    environment_type=SessionType.SCRIPT,
-    creation_time=datetime.now(),
-)
+session = get_new_session()
 
 arg_1 = ArgumentNode(
     id=get_new_id(),
diff --git a/tests/stub_data/graph_with_csv_import.py b/tests/stub_data/graph_with_csv_import.py
index 1cacae5..196ddcc 100644
--- a/tests/stub_data/graph_with_csv_import.py
+++ b/tests/stub_data/graph_with_csv_import.py
@@ -20,6 +20,7 @@ s = df['a'].sum()
 This test also has method chaining, which is a good case
 """
 pandas_lib = Library(
+    id=get_new_id(),
     name="pandas",
     version="1.2.4",
     path="/Users/yifanwu/miniforge3/lib/python3.9/site-packages/pandas",
diff --git a/tests/stub_data/graph_with_function_definition.py b/tests/stub_data/graph_with_function_definition.py
index 7be3e1b..4915917 100644
--- a/tests/stub_data/graph_with_function_definition.py
+++ b/tests/stub_data/graph_with_function_definition.py
@@ -1,6 +1,5 @@
 from lineapy.data.graph import Graph
-from tests.util import get_new_id
-from tests.stub_data.simple_graph import session
+from tests.util import get_new_id, get_new_session
 from lineapy.data.graph import Graph
 from lineapy.data.types import (
     ImportNode,
@@ -28,13 +27,17 @@ my_function()
 
 """
 
+math_lib = Library(id=get_new_id(), name="math", version="1", path="home")
+
+session = get_new_session(libraries=[math_lib])
+
 line_1_id = get_new_id()
 
 line_1_import = ImportNode(
     id=line_1_id,
     session_id=session.id,
     code="import math",
-    library=Library(name="math", version="1", path="home"),
+    library=math_lib,
 )
 
 a_id = get_new_id()
diff --git a/tests/stub_data/graph_with_import.py b/tests/stub_data/graph_with_import.py
index c9d123d..7913501 100644
--- a/tests/stub_data/graph_with_import.py
+++ b/tests/stub_data/graph_with_import.py
@@ -11,7 +11,7 @@ from lineapy.data.types import (
     SessionType,
 )
 
-from tests.util import get_new_id
+from tests.util import get_new_id, get_new_session
 
 """
 
@@ -22,12 +22,9 @@ b = root(a)
 ```
 """
 
-session = SessionContext(
-    id=get_new_id(),
-    file_name="testing.py",
-    environment_type=SessionType.SCRIPT,
-    creation_time=datetime.now(),
-)
+math_lib = Library(id=get_new_id(), name="math", version="1", path="")
+
+session = get_new_session(libraries=[math_lib])
 
 line_1_id = get_new_id()
 
@@ -35,7 +32,7 @@ line_1 = ImportNode(
     id=line_1_id,
     session_id=session.id,
     code="from math import pow, sqrt as root",
-    library=Library(name="math", version="1", path=""),
+    library=math_lib,
     attributes={"power": "pow", "root": "sqrt"},
 )
 
diff --git a/tests/stub_data/graph_with_loops.py b/tests/stub_data/graph_with_loops.py
index fb240df..2376166 100644
--- a/tests/stub_data/graph_with_loops.py
+++ b/tests/stub_data/graph_with_loops.py
@@ -1,5 +1,4 @@
-from tests.util import get_new_id
-from tests.stub_data.simple_graph import session
+from tests.util import get_new_id, get_new_session
 from lineapy.data.graph import Graph
 from lineapy.data.types import (
     LiteralAssignNode,
@@ -32,6 +31,9 @@ Graph method notes:
 
 """
 
+operator_lib = Library(id=get_new_id(), name="operator", version="1", path="")
+
+session = get_new_session(libraries=[operator_lib])
 
 a_id = get_new_id()
 
@@ -116,7 +118,7 @@ operator_module = ImportNode(
     id=operator_module_id,
     session_id=session.id,
     code="import operator",
-    library=Library(name="operator", version="1", path=""),
+    library=operator_lib,
 )
 
 x_argument_id = get_new_id()
diff --git a/tests/stub_data/nested_call_graph.py b/tests/stub_data/nested_call_graph.py
index 849836a..8a3fc39 100644
--- a/tests/stub_data/nested_call_graph.py
+++ b/tests/stub_data/nested_call_graph.py
@@ -1,5 +1,5 @@
 from lineapy.data.graph import Graph
-from tests.util import get_new_id
+from tests.util import get_new_id, get_new_session
 from lineapy.data.types import (
     ArgumentNode,
     CallNode,
@@ -16,12 +16,7 @@ a = min(abs(-11), 10)
 ```
 """
 
-session = SessionContext(
-    id=get_new_id(),
-    file_name="testing.py",
-    environment_type=SessionType.SCRIPT,
-    creation_time=datetime.now(),
-)
+session = get_new_session()
 
 arg_literal_id = get_new_id()
 
diff --git a/tests/stub_data/simple_graph.py b/tests/stub_data/simple_graph.py
index 1158bf7..59b1166 100644
--- a/tests/stub_data/simple_graph.py
+++ b/tests/stub_data/simple_graph.py
@@ -7,7 +7,7 @@ from lineapy.data.types import (
     SessionContext,
     SessionType,
 )
-from tests.util import get_new_id
+from tests.util import get_new_id, get_new_session
 
 """
 The simple graph represents the execution of the following:
@@ -21,12 +21,7 @@ Notes:
 - the ids are kept constant so we can more easily reference the same values in a different file
 """
 
-session = SessionContext(
-    id=get_new_id(),
-    file_name="testing.py",
-    environment_type=SessionType.SCRIPT,
-    creation_time=datetime.now(),
-)
+session = get_new_session()
 
 arg_literal_id = get_new_id()
 
diff --git a/tests/util.py b/tests/util.py
index d2e4e57..b14f731 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -12,7 +12,7 @@ def get_new_id():
     return uuid4()
 
 
-def get_new_session(libraries):
+def get_new_session(libraries=[]):
     return SessionContext(
         id=get_new_id(),
         file_name="testing.py",
